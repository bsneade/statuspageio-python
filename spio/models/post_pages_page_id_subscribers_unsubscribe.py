# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class PostPagesPageIdSubscribersUnsubscribe(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subscribers': 'str',
        'type': 'str',
        'state': 'str',
        'skip_unsubscription_notification': 'bool'
    }

    attribute_map = {
        'subscribers': 'subscribers',
        'type': 'type',
        'state': 'state',
        'skip_unsubscription_notification': 'skip_unsubscription_notification'
    }

    def __init__(self, subscribers=None, type=None, state='active', skip_unsubscription_notification=None, local_vars_configuration=None):  # noqa: E501
        """PostPagesPageIdSubscribersUnsubscribe - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._subscribers = None
        self._type = None
        self._state = None
        self._skip_unsubscription_notification = None
        self.discriminator = None

        self.subscribers = subscribers
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if skip_unsubscription_notification is not None:
            self.skip_unsubscription_notification = skip_unsubscription_notification

    @property
    def subscribers(self):
        """Gets the subscribers of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501

        The array of subscriber codes to unsubscribe (limited to 100), or \"all\" to unsubscribe all subscribers if the number of subscribers is less than 100.  # noqa: E501

        :return: The subscribers of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :rtype: str
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this PostPagesPageIdSubscribersUnsubscribe.

        The array of subscriber codes to unsubscribe (limited to 100), or \"all\" to unsubscribe all subscribers if the number of subscribers is less than 100.  # noqa: E501

        :param subscribers: The subscribers of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subscribers is None:  # noqa: E501
            raise ValueError("Invalid value for `subscribers`, must not be `None`")  # noqa: E501

        self._subscribers = subscribers

    @property
    def type(self):
        """Gets the type of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501

        If this is present, only unsubscribe subscribers of this type.  # noqa: E501

        :return: The type of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostPagesPageIdSubscribersUnsubscribe.

        If this is present, only unsubscribe subscribers of this type.  # noqa: E501

        :param type: The type of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :type: str
        """
        allowed_values = ["email", "sms", "webhook", "integration_partner"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501

        If this is present, only unsubscribe subscribers in this state. Specify state \"all\" to unsubscribe subscribers in any states.  # noqa: E501

        :return: The state of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PostPagesPageIdSubscribersUnsubscribe.

        If this is present, only unsubscribe subscribers in this state. Specify state \"all\" to unsubscribe subscribers in any states.  # noqa: E501

        :param state: The state of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "unconfirmed", "quarantined", "all"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def skip_unsubscription_notification(self):
        """Gets the skip_unsubscription_notification of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501

        If skip_unsubscription_notification is true, the subscribers do not receive any notifications when they are unsubscribed.  # noqa: E501

        :return: The skip_unsubscription_notification of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :rtype: bool
        """
        return self._skip_unsubscription_notification

    @skip_unsubscription_notification.setter
    def skip_unsubscription_notification(self, skip_unsubscription_notification):
        """Sets the skip_unsubscription_notification of this PostPagesPageIdSubscribersUnsubscribe.

        If skip_unsubscription_notification is true, the subscribers do not receive any notifications when they are unsubscribed.  # noqa: E501

        :param skip_unsubscription_notification: The skip_unsubscription_notification of this PostPagesPageIdSubscribersUnsubscribe.  # noqa: E501
        :type: bool
        """

        self._skip_unsubscription_notification = skip_unsubscription_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPagesPageIdSubscribersUnsubscribe):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostPagesPageIdSubscribersUnsubscribe):
            return True

        return self.to_dict() != other.to_dict()
