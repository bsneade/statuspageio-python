# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class Metric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'metrics_provider_id': 'str',
        'metrics_display_id': 'str',
        'name': 'str',
        'display': 'bool',
        'tooltip_description': 'str',
        'backfilled': 'bool',
        'y_axis_min': 'int',
        'y_axis_max': 'int',
        'y_axis_hidden': 'bool',
        'suffix': 'str',
        'decimal_places': 'int',
        'most_recent_data_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'metrics_provider_id': 'metrics_provider_id',
        'metrics_display_id': 'metrics_display_id',
        'name': 'name',
        'display': 'display',
        'tooltip_description': 'tooltip_description',
        'backfilled': 'backfilled',
        'y_axis_min': 'y_axis_min',
        'y_axis_max': 'y_axis_max',
        'y_axis_hidden': 'y_axis_hidden',
        'suffix': 'suffix',
        'decimal_places': 'decimal_places',
        'most_recent_data_at': 'most_recent_data_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, metrics_provider_id=None, metrics_display_id=None, name=None, display=None, tooltip_description=None, backfilled=None, y_axis_min=None, y_axis_max=None, y_axis_hidden=None, suffix=None, decimal_places=None, most_recent_data_at=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Metric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._metrics_provider_id = None
        self._metrics_display_id = None
        self._name = None
        self._display = None
        self._tooltip_description = None
        self._backfilled = None
        self._y_axis_min = None
        self._y_axis_max = None
        self._y_axis_hidden = None
        self._suffix = None
        self._decimal_places = None
        self._most_recent_data_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if metrics_provider_id is not None:
            self.metrics_provider_id = metrics_provider_id
        if metrics_display_id is not None:
            self.metrics_display_id = metrics_display_id
        if name is not None:
            self.name = name
        if display is not None:
            self.display = display
        if tooltip_description is not None:
            self.tooltip_description = tooltip_description
        if backfilled is not None:
            self.backfilled = backfilled
        if y_axis_min is not None:
            self.y_axis_min = y_axis_min
        if y_axis_max is not None:
            self.y_axis_max = y_axis_max
        if y_axis_hidden is not None:
            self.y_axis_hidden = y_axis_hidden
        if suffix is not None:
            self.suffix = suffix
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if most_recent_data_at is not None:
            self.most_recent_data_at = most_recent_data_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Metric.  # noqa: E501

        Metric identifier  # noqa: E501

        :return: The id of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metric.

        Metric identifier  # noqa: E501

        :param id: The id of this Metric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metrics_provider_id(self):
        """Gets the metrics_provider_id of this Metric.  # noqa: E501

        Metric Provider identifier  # noqa: E501

        :return: The metrics_provider_id of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._metrics_provider_id

    @metrics_provider_id.setter
    def metrics_provider_id(self, metrics_provider_id):
        """Sets the metrics_provider_id of this Metric.

        Metric Provider identifier  # noqa: E501

        :param metrics_provider_id: The metrics_provider_id of this Metric.  # noqa: E501
        :type: str
        """

        self._metrics_provider_id = metrics_provider_id

    @property
    def metrics_display_id(self):
        """Gets the metrics_display_id of this Metric.  # noqa: E501

        Metric Display identifier  # noqa: E501

        :return: The metrics_display_id of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._metrics_display_id

    @metrics_display_id.setter
    def metrics_display_id(self, metrics_display_id):
        """Sets the metrics_display_id of this Metric.

        Metric Display identifier  # noqa: E501

        :param metrics_display_id: The metrics_display_id of this Metric.  # noqa: E501
        :type: str
        """

        self._metrics_display_id = metrics_display_id

    @property
    def name(self):
        """Gets the name of this Metric.  # noqa: E501

        Name of metric  # noqa: E501

        :return: The name of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.

        Name of metric  # noqa: E501

        :param name: The name of this Metric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display(self):
        """Gets the display of this Metric.  # noqa: E501

        Should the metric be displayed  # noqa: E501

        :return: The display of this Metric.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Metric.

        Should the metric be displayed  # noqa: E501

        :param display: The display of this Metric.  # noqa: E501
        :type: bool
        """

        self._display = display

    @property
    def tooltip_description(self):
        """Gets the tooltip_description of this Metric.  # noqa: E501


        :return: The tooltip_description of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._tooltip_description

    @tooltip_description.setter
    def tooltip_description(self, tooltip_description):
        """Sets the tooltip_description of this Metric.


        :param tooltip_description: The tooltip_description of this Metric.  # noqa: E501
        :type: str
        """

        self._tooltip_description = tooltip_description

    @property
    def backfilled(self):
        """Gets the backfilled of this Metric.  # noqa: E501


        :return: The backfilled of this Metric.  # noqa: E501
        :rtype: bool
        """
        return self._backfilled

    @backfilled.setter
    def backfilled(self, backfilled):
        """Sets the backfilled of this Metric.


        :param backfilled: The backfilled of this Metric.  # noqa: E501
        :type: bool
        """

        self._backfilled = backfilled

    @property
    def y_axis_min(self):
        """Gets the y_axis_min of this Metric.  # noqa: E501


        :return: The y_axis_min of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._y_axis_min

    @y_axis_min.setter
    def y_axis_min(self, y_axis_min):
        """Sets the y_axis_min of this Metric.


        :param y_axis_min: The y_axis_min of this Metric.  # noqa: E501
        :type: int
        """

        self._y_axis_min = y_axis_min

    @property
    def y_axis_max(self):
        """Gets the y_axis_max of this Metric.  # noqa: E501


        :return: The y_axis_max of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._y_axis_max

    @y_axis_max.setter
    def y_axis_max(self, y_axis_max):
        """Sets the y_axis_max of this Metric.


        :param y_axis_max: The y_axis_max of this Metric.  # noqa: E501
        :type: int
        """

        self._y_axis_max = y_axis_max

    @property
    def y_axis_hidden(self):
        """Gets the y_axis_hidden of this Metric.  # noqa: E501

        Should the values on the y axis be hidden on render  # noqa: E501

        :return: The y_axis_hidden of this Metric.  # noqa: E501
        :rtype: bool
        """
        return self._y_axis_hidden

    @y_axis_hidden.setter
    def y_axis_hidden(self, y_axis_hidden):
        """Sets the y_axis_hidden of this Metric.

        Should the values on the y axis be hidden on render  # noqa: E501

        :param y_axis_hidden: The y_axis_hidden of this Metric.  # noqa: E501
        :type: bool
        """

        self._y_axis_hidden = y_axis_hidden

    @property
    def suffix(self):
        """Gets the suffix of this Metric.  # noqa: E501

        Suffix to describe the units on the graph  # noqa: E501

        :return: The suffix of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Metric.

        Suffix to describe the units on the graph  # noqa: E501

        :param suffix: The suffix of this Metric.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def decimal_places(self):
        """Gets the decimal_places of this Metric.  # noqa: E501


        :return: The decimal_places of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this Metric.


        :param decimal_places: The decimal_places of this Metric.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def most_recent_data_at(self):
        """Gets the most_recent_data_at of this Metric.  # noqa: E501


        :return: The most_recent_data_at of this Metric.  # noqa: E501
        :rtype: datetime
        """
        return self._most_recent_data_at

    @most_recent_data_at.setter
    def most_recent_data_at(self, most_recent_data_at):
        """Sets the most_recent_data_at of this Metric.


        :param most_recent_data_at: The most_recent_data_at of this Metric.  # noqa: E501
        :type: datetime
        """

        self._most_recent_data_at = most_recent_data_at

    @property
    def created_at(self):
        """Gets the created_at of this Metric.  # noqa: E501


        :return: The created_at of this Metric.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Metric.


        :param created_at: The created_at of this Metric.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Metric.  # noqa: E501


        :return: The updated_at of this Metric.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Metric.


        :param updated_at: The updated_at of this Metric.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Metric):
            return True

        return self.to_dict() != other.to_dict()
