# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class PageAccessUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'page_id': 'str',
        'email': 'str',
        'external_login': 'str',
        'page_access_group_id': 'str',
        'page_access_group_ids': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'page_id': 'page_id',
        'email': 'email',
        'external_login': 'external_login',
        'page_access_group_id': 'page_access_group_id',
        'page_access_group_ids': 'page_access_group_ids',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, page_id=None, email=None, external_login=None, page_access_group_id=None, page_access_group_ids=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """PageAccessUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._page_id = None
        self._email = None
        self._external_login = None
        self._page_access_group_id = None
        self._page_access_group_ids = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if page_id is not None:
            self.page_id = page_id
        if email is not None:
            self.email = email
        if external_login is not None:
            self.external_login = external_login
        if page_access_group_id is not None:
            self.page_access_group_id = page_access_group_id
        if page_access_group_ids is not None:
            self.page_access_group_ids = page_access_group_ids
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this PageAccessUser.  # noqa: E501

        Page Access User Identifier  # noqa: E501

        :return: The id of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageAccessUser.

        Page Access User Identifier  # noqa: E501

        :param id: The id of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def page_id(self):
        """Gets the page_id of this PageAccessUser.  # noqa: E501


        :return: The page_id of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this PageAccessUser.


        :param page_id: The page_id of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._page_id = page_id

    @property
    def email(self):
        """Gets the email of this PageAccessUser.  # noqa: E501


        :return: The email of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PageAccessUser.


        :param email: The email of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def external_login(self):
        """Gets the external_login of this PageAccessUser.  # noqa: E501


        :return: The external_login of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._external_login

    @external_login.setter
    def external_login(self, external_login):
        """Sets the external_login of this PageAccessUser.


        :param external_login: The external_login of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._external_login = external_login

    @property
    def page_access_group_id(self):
        """Gets the page_access_group_id of this PageAccessUser.  # noqa: E501


        :return: The page_access_group_id of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._page_access_group_id

    @page_access_group_id.setter
    def page_access_group_id(self, page_access_group_id):
        """Sets the page_access_group_id of this PageAccessUser.


        :param page_access_group_id: The page_access_group_id of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._page_access_group_id = page_access_group_id

    @property
    def page_access_group_ids(self):
        """Gets the page_access_group_ids of this PageAccessUser.  # noqa: E501


        :return: The page_access_group_ids of this PageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._page_access_group_ids

    @page_access_group_ids.setter
    def page_access_group_ids(self, page_access_group_ids):
        """Sets the page_access_group_ids of this PageAccessUser.


        :param page_access_group_ids: The page_access_group_ids of this PageAccessUser.  # noqa: E501
        :type: str
        """

        self._page_access_group_ids = page_access_group_ids

    @property
    def created_at(self):
        """Gets the created_at of this PageAccessUser.  # noqa: E501


        :return: The created_at of this PageAccessUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PageAccessUser.


        :param created_at: The created_at of this PageAccessUser.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PageAccessUser.  # noqa: E501


        :return: The updated_at of this PageAccessUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PageAccessUser.


        :param updated_at: The updated_at of this PageAccessUser.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageAccessUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PageAccessUser):
            return True

        return self.to_dict() != other.to_dict()
