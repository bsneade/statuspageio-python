# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class SubscriberCountByTypeAndState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'SubscriberCountByState',
        'sms': 'SubscriberCountByState',
        'webhook': 'SubscriberCountByState',
        'integration_partner': 'SubscriberCountByState'
    }

    attribute_map = {
        'email': 'email',
        'sms': 'sms',
        'webhook': 'webhook',
        'integration_partner': 'integration_partner'
    }

    def __init__(self, email=None, sms=None, webhook=None, integration_partner=None, local_vars_configuration=None):  # noqa: E501
        """SubscriberCountByTypeAndState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._sms = None
        self._webhook = None
        self._integration_partner = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if sms is not None:
            self.sms = sms
        if webhook is not None:
            self.webhook = webhook
        if integration_partner is not None:
            self.integration_partner = integration_partner

    @property
    def email(self):
        """Gets the email of this SubscriberCountByTypeAndState.  # noqa: E501


        :return: The email of this SubscriberCountByTypeAndState.  # noqa: E501
        :rtype: SubscriberCountByState
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubscriberCountByTypeAndState.


        :param email: The email of this SubscriberCountByTypeAndState.  # noqa: E501
        :type: SubscriberCountByState
        """

        self._email = email

    @property
    def sms(self):
        """Gets the sms of this SubscriberCountByTypeAndState.  # noqa: E501


        :return: The sms of this SubscriberCountByTypeAndState.  # noqa: E501
        :rtype: SubscriberCountByState
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this SubscriberCountByTypeAndState.


        :param sms: The sms of this SubscriberCountByTypeAndState.  # noqa: E501
        :type: SubscriberCountByState
        """

        self._sms = sms

    @property
    def webhook(self):
        """Gets the webhook of this SubscriberCountByTypeAndState.  # noqa: E501


        :return: The webhook of this SubscriberCountByTypeAndState.  # noqa: E501
        :rtype: SubscriberCountByState
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this SubscriberCountByTypeAndState.


        :param webhook: The webhook of this SubscriberCountByTypeAndState.  # noqa: E501
        :type: SubscriberCountByState
        """

        self._webhook = webhook

    @property
    def integration_partner(self):
        """Gets the integration_partner of this SubscriberCountByTypeAndState.  # noqa: E501


        :return: The integration_partner of this SubscriberCountByTypeAndState.  # noqa: E501
        :rtype: SubscriberCountByState
        """
        return self._integration_partner

    @integration_partner.setter
    def integration_partner(self, integration_partner):
        """Sets the integration_partner of this SubscriberCountByTypeAndState.


        :param integration_partner: The integration_partner of this SubscriberCountByTypeAndState.  # noqa: E501
        :type: SubscriberCountByState
        """

        self._integration_partner = integration_partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriberCountByTypeAndState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriberCountByTypeAndState):
            return True

        return self.to_dict() != other.to_dict()
