# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class PatchPagesPage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'domain': 'str',
        'subdomain': 'str',
        'url': 'str',
        'branding': 'str',
        'css_body_background_color': 'str',
        'css_font_color': 'str',
        'css_light_font_color': 'str',
        'css_greens': 'str',
        'css_yellows': 'str',
        'css_oranges': 'str',
        'css_reds': 'str',
        'css_blues': 'str',
        'css_border_color': 'str',
        'css_graph_color': 'str',
        'css_link_color': 'str',
        'hidden_from_search': 'bool',
        'viewers_must_be_team_members': 'bool',
        'allow_page_subscribers': 'bool',
        'allow_incident_subscribers': 'bool',
        'allow_email_subscribers': 'bool',
        'allow_sms_subscribers': 'bool',
        'allow_rss_atom_feeds': 'bool',
        'allow_webhook_subscribers': 'bool',
        'notifications_from_email': 'str',
        'time_zone': 'str',
        'notifications_email_footer': 'str'
    }

    attribute_map = {
        'name': 'name',
        'domain': 'domain',
        'subdomain': 'subdomain',
        'url': 'url',
        'branding': 'branding',
        'css_body_background_color': 'css_body_background_color',
        'css_font_color': 'css_font_color',
        'css_light_font_color': 'css_light_font_color',
        'css_greens': 'css_greens',
        'css_yellows': 'css_yellows',
        'css_oranges': 'css_oranges',
        'css_reds': 'css_reds',
        'css_blues': 'css_blues',
        'css_border_color': 'css_border_color',
        'css_graph_color': 'css_graph_color',
        'css_link_color': 'css_link_color',
        'hidden_from_search': 'hidden_from_search',
        'viewers_must_be_team_members': 'viewers_must_be_team_members',
        'allow_page_subscribers': 'allow_page_subscribers',
        'allow_incident_subscribers': 'allow_incident_subscribers',
        'allow_email_subscribers': 'allow_email_subscribers',
        'allow_sms_subscribers': 'allow_sms_subscribers',
        'allow_rss_atom_feeds': 'allow_rss_atom_feeds',
        'allow_webhook_subscribers': 'allow_webhook_subscribers',
        'notifications_from_email': 'notifications_from_email',
        'time_zone': 'time_zone',
        'notifications_email_footer': 'notifications_email_footer'
    }

    def __init__(self, name=None, domain=None, subdomain=None, url=None, branding=None, css_body_background_color=None, css_font_color=None, css_light_font_color=None, css_greens=None, css_yellows=None, css_oranges=None, css_reds=None, css_blues=None, css_border_color=None, css_graph_color=None, css_link_color=None, hidden_from_search=None, viewers_must_be_team_members=None, allow_page_subscribers=None, allow_incident_subscribers=None, allow_email_subscribers=None, allow_sms_subscribers=None, allow_rss_atom_feeds=None, allow_webhook_subscribers=None, notifications_from_email=None, time_zone=None, notifications_email_footer=None, local_vars_configuration=None):  # noqa: E501
        """PatchPagesPage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._domain = None
        self._subdomain = None
        self._url = None
        self._branding = None
        self._css_body_background_color = None
        self._css_font_color = None
        self._css_light_font_color = None
        self._css_greens = None
        self._css_yellows = None
        self._css_oranges = None
        self._css_reds = None
        self._css_blues = None
        self._css_border_color = None
        self._css_graph_color = None
        self._css_link_color = None
        self._hidden_from_search = None
        self._viewers_must_be_team_members = None
        self._allow_page_subscribers = None
        self._allow_incident_subscribers = None
        self._allow_email_subscribers = None
        self._allow_sms_subscribers = None
        self._allow_rss_atom_feeds = None
        self._allow_webhook_subscribers = None
        self._notifications_from_email = None
        self._time_zone = None
        self._notifications_email_footer = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if domain is not None:
            self.domain = domain
        if subdomain is not None:
            self.subdomain = subdomain
        if url is not None:
            self.url = url
        if branding is not None:
            self.branding = branding
        if css_body_background_color is not None:
            self.css_body_background_color = css_body_background_color
        if css_font_color is not None:
            self.css_font_color = css_font_color
        if css_light_font_color is not None:
            self.css_light_font_color = css_light_font_color
        if css_greens is not None:
            self.css_greens = css_greens
        if css_yellows is not None:
            self.css_yellows = css_yellows
        if css_oranges is not None:
            self.css_oranges = css_oranges
        if css_reds is not None:
            self.css_reds = css_reds
        if css_blues is not None:
            self.css_blues = css_blues
        if css_border_color is not None:
            self.css_border_color = css_border_color
        if css_graph_color is not None:
            self.css_graph_color = css_graph_color
        if css_link_color is not None:
            self.css_link_color = css_link_color
        if hidden_from_search is not None:
            self.hidden_from_search = hidden_from_search
        if viewers_must_be_team_members is not None:
            self.viewers_must_be_team_members = viewers_must_be_team_members
        if allow_page_subscribers is not None:
            self.allow_page_subscribers = allow_page_subscribers
        if allow_incident_subscribers is not None:
            self.allow_incident_subscribers = allow_incident_subscribers
        if allow_email_subscribers is not None:
            self.allow_email_subscribers = allow_email_subscribers
        if allow_sms_subscribers is not None:
            self.allow_sms_subscribers = allow_sms_subscribers
        if allow_rss_atom_feeds is not None:
            self.allow_rss_atom_feeds = allow_rss_atom_feeds
        if allow_webhook_subscribers is not None:
            self.allow_webhook_subscribers = allow_webhook_subscribers
        if notifications_from_email is not None:
            self.notifications_from_email = notifications_from_email
        if time_zone is not None:
            self.time_zone = time_zone
        if notifications_email_footer is not None:
            self.notifications_email_footer = notifications_email_footer

    @property
    def name(self):
        """Gets the name of this PatchPagesPage.  # noqa: E501

        Name of your page to be displayed  # noqa: E501

        :return: The name of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchPagesPage.

        Name of your page to be displayed  # noqa: E501

        :param name: The name of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def domain(self):
        """Gets the domain of this PatchPagesPage.  # noqa: E501

        CNAME alias for your status page  # noqa: E501

        :return: The domain of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PatchPagesPage.

        CNAME alias for your status page  # noqa: E501

        :param domain: The domain of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def subdomain(self):
        """Gets the subdomain of this PatchPagesPage.  # noqa: E501

        Subdomain at which to access your status page  # noqa: E501

        :return: The subdomain of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this PatchPagesPage.

        Subdomain at which to access your status page  # noqa: E501

        :param subdomain: The subdomain of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def url(self):
        """Gets the url of this PatchPagesPage.  # noqa: E501

        Website of your page.  Clicking on your statuspage image will link here.  # noqa: E501

        :return: The url of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PatchPagesPage.

        Website of your page.  Clicking on your statuspage image will link here.  # noqa: E501

        :param url: The url of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def branding(self):
        """Gets the branding of this PatchPagesPage.  # noqa: E501

        The main template your statuspage will use  # noqa: E501

        :return: The branding of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this PatchPagesPage.

        The main template your statuspage will use  # noqa: E501

        :param branding: The branding of this PatchPagesPage.  # noqa: E501
        :type: str
        """
        allowed_values = ["premium", "basic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and branding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `branding` ({0}), must be one of {1}"  # noqa: E501
                .format(branding, allowed_values)
            )

        self._branding = branding

    @property
    def css_body_background_color(self):
        """Gets the css_body_background_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_body_background_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_body_background_color

    @css_body_background_color.setter
    def css_body_background_color(self, css_body_background_color):
        """Sets the css_body_background_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_body_background_color: The css_body_background_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_body_background_color = css_body_background_color

    @property
    def css_font_color(self):
        """Gets the css_font_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_font_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_font_color

    @css_font_color.setter
    def css_font_color(self, css_font_color):
        """Sets the css_font_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_font_color: The css_font_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_font_color = css_font_color

    @property
    def css_light_font_color(self):
        """Gets the css_light_font_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_light_font_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_light_font_color

    @css_light_font_color.setter
    def css_light_font_color(self, css_light_font_color):
        """Sets the css_light_font_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_light_font_color: The css_light_font_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_light_font_color = css_light_font_color

    @property
    def css_greens(self):
        """Gets the css_greens of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_greens of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_greens

    @css_greens.setter
    def css_greens(self, css_greens):
        """Sets the css_greens of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_greens: The css_greens of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_greens = css_greens

    @property
    def css_yellows(self):
        """Gets the css_yellows of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_yellows of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_yellows

    @css_yellows.setter
    def css_yellows(self, css_yellows):
        """Sets the css_yellows of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_yellows: The css_yellows of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_yellows = css_yellows

    @property
    def css_oranges(self):
        """Gets the css_oranges of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_oranges of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_oranges

    @css_oranges.setter
    def css_oranges(self, css_oranges):
        """Sets the css_oranges of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_oranges: The css_oranges of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_oranges = css_oranges

    @property
    def css_reds(self):
        """Gets the css_reds of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_reds of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_reds

    @css_reds.setter
    def css_reds(self, css_reds):
        """Sets the css_reds of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_reds: The css_reds of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_reds = css_reds

    @property
    def css_blues(self):
        """Gets the css_blues of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_blues of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_blues

    @css_blues.setter
    def css_blues(self, css_blues):
        """Sets the css_blues of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_blues: The css_blues of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_blues = css_blues

    @property
    def css_border_color(self):
        """Gets the css_border_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_border_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_border_color

    @css_border_color.setter
    def css_border_color(self, css_border_color):
        """Sets the css_border_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_border_color: The css_border_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_border_color = css_border_color

    @property
    def css_graph_color(self):
        """Gets the css_graph_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_graph_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_graph_color

    @css_graph_color.setter
    def css_graph_color(self, css_graph_color):
        """Sets the css_graph_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_graph_color: The css_graph_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_graph_color = css_graph_color

    @property
    def css_link_color(self):
        """Gets the css_link_color of this PatchPagesPage.  # noqa: E501

        CSS Color  # noqa: E501

        :return: The css_link_color of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._css_link_color

    @css_link_color.setter
    def css_link_color(self, css_link_color):
        """Sets the css_link_color of this PatchPagesPage.

        CSS Color  # noqa: E501

        :param css_link_color: The css_link_color of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._css_link_color = css_link_color

    @property
    def hidden_from_search(self):
        """Gets the hidden_from_search of this PatchPagesPage.  # noqa: E501

        Should your page hide itself from search engines  # noqa: E501

        :return: The hidden_from_search of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_from_search

    @hidden_from_search.setter
    def hidden_from_search(self, hidden_from_search):
        """Sets the hidden_from_search of this PatchPagesPage.

        Should your page hide itself from search engines  # noqa: E501

        :param hidden_from_search: The hidden_from_search of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._hidden_from_search = hidden_from_search

    @property
    def viewers_must_be_team_members(self):
        """Gets the viewers_must_be_team_members of this PatchPagesPage.  # noqa: E501


        :return: The viewers_must_be_team_members of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._viewers_must_be_team_members

    @viewers_must_be_team_members.setter
    def viewers_must_be_team_members(self, viewers_must_be_team_members):
        """Sets the viewers_must_be_team_members of this PatchPagesPage.


        :param viewers_must_be_team_members: The viewers_must_be_team_members of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._viewers_must_be_team_members = viewers_must_be_team_members

    @property
    def allow_page_subscribers(self):
        """Gets the allow_page_subscribers of this PatchPagesPage.  # noqa: E501

        Can your users subscribe to all notifications on the page  # noqa: E501

        :return: The allow_page_subscribers of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_page_subscribers

    @allow_page_subscribers.setter
    def allow_page_subscribers(self, allow_page_subscribers):
        """Sets the allow_page_subscribers of this PatchPagesPage.

        Can your users subscribe to all notifications on the page  # noqa: E501

        :param allow_page_subscribers: The allow_page_subscribers of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_page_subscribers = allow_page_subscribers

    @property
    def allow_incident_subscribers(self):
        """Gets the allow_incident_subscribers of this PatchPagesPage.  # noqa: E501

        Can your users subscribe to notifications for a single incident  # noqa: E501

        :return: The allow_incident_subscribers of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_incident_subscribers

    @allow_incident_subscribers.setter
    def allow_incident_subscribers(self, allow_incident_subscribers):
        """Sets the allow_incident_subscribers of this PatchPagesPage.

        Can your users subscribe to notifications for a single incident  # noqa: E501

        :param allow_incident_subscribers: The allow_incident_subscribers of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_incident_subscribers = allow_incident_subscribers

    @property
    def allow_email_subscribers(self):
        """Gets the allow_email_subscribers of this PatchPagesPage.  # noqa: E501

        Can your users choose to receive notifications via email  # noqa: E501

        :return: The allow_email_subscribers of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_subscribers

    @allow_email_subscribers.setter
    def allow_email_subscribers(self, allow_email_subscribers):
        """Sets the allow_email_subscribers of this PatchPagesPage.

        Can your users choose to receive notifications via email  # noqa: E501

        :param allow_email_subscribers: The allow_email_subscribers of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_email_subscribers = allow_email_subscribers

    @property
    def allow_sms_subscribers(self):
        """Gets the allow_sms_subscribers of this PatchPagesPage.  # noqa: E501

        Can your users choose to receive notifications via SMS  # noqa: E501

        :return: The allow_sms_subscribers of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sms_subscribers

    @allow_sms_subscribers.setter
    def allow_sms_subscribers(self, allow_sms_subscribers):
        """Sets the allow_sms_subscribers of this PatchPagesPage.

        Can your users choose to receive notifications via SMS  # noqa: E501

        :param allow_sms_subscribers: The allow_sms_subscribers of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_sms_subscribers = allow_sms_subscribers

    @property
    def allow_rss_atom_feeds(self):
        """Gets the allow_rss_atom_feeds of this PatchPagesPage.  # noqa: E501

        Can your users choose to access incident feeds via RSS/Atom  # noqa: E501

        :return: The allow_rss_atom_feeds of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_rss_atom_feeds

    @allow_rss_atom_feeds.setter
    def allow_rss_atom_feeds(self, allow_rss_atom_feeds):
        """Sets the allow_rss_atom_feeds of this PatchPagesPage.

        Can your users choose to access incident feeds via RSS/Atom  # noqa: E501

        :param allow_rss_atom_feeds: The allow_rss_atom_feeds of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_rss_atom_feeds = allow_rss_atom_feeds

    @property
    def allow_webhook_subscribers(self):
        """Gets the allow_webhook_subscribers of this PatchPagesPage.  # noqa: E501

        Can your users choose to receive notifications via Webhooks  # noqa: E501

        :return: The allow_webhook_subscribers of this PatchPagesPage.  # noqa: E501
        :rtype: bool
        """
        return self._allow_webhook_subscribers

    @allow_webhook_subscribers.setter
    def allow_webhook_subscribers(self, allow_webhook_subscribers):
        """Sets the allow_webhook_subscribers of this PatchPagesPage.

        Can your users choose to receive notifications via Webhooks  # noqa: E501

        :param allow_webhook_subscribers: The allow_webhook_subscribers of this PatchPagesPage.  # noqa: E501
        :type: bool
        """

        self._allow_webhook_subscribers = allow_webhook_subscribers

    @property
    def notifications_from_email(self):
        """Gets the notifications_from_email of this PatchPagesPage.  # noqa: E501

        Allows you to customize the email address your page notifications come from  # noqa: E501

        :return: The notifications_from_email of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._notifications_from_email

    @notifications_from_email.setter
    def notifications_from_email(self, notifications_from_email):
        """Sets the notifications_from_email of this PatchPagesPage.

        Allows you to customize the email address your page notifications come from  # noqa: E501

        :param notifications_from_email: The notifications_from_email of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._notifications_from_email = notifications_from_email

    @property
    def time_zone(self):
        """Gets the time_zone of this PatchPagesPage.  # noqa: E501

        Timezone configured for your page  # noqa: E501

        :return: The time_zone of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this PatchPagesPage.

        Timezone configured for your page  # noqa: E501

        :param time_zone: The time_zone of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def notifications_email_footer(self):
        """Gets the notifications_email_footer of this PatchPagesPage.  # noqa: E501

        Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting  # noqa: E501

        :return: The notifications_email_footer of this PatchPagesPage.  # noqa: E501
        :rtype: str
        """
        return self._notifications_email_footer

    @notifications_email_footer.setter
    def notifications_email_footer(self, notifications_email_footer):
        """Sets the notifications_email_footer of this PatchPagesPage.

        Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting  # noqa: E501

        :param notifications_email_footer: The notifications_email_footer of this PatchPagesPage.  # noqa: E501
        :type: str
        """

        self._notifications_email_footer = notifications_email_footer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchPagesPage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchPagesPage):
            return True

        return self.to_dict() != other.to_dict()
