# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from spio.configuration import Configuration


class MetricsProvider(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'metric_identifier': 'str',
        'suffix': 'str',
        'display': 'str',
        'tooltip_description': 'str',
        'y_axis_min': 'str',
        'y_axis_max': 'str',
        'decimal_places': 'str',
        'type': 'str',
        'email': 'str',
        'disabled': 'bool',
        'api_key': 'str',
        'api_token': 'str',
        'application_key': 'str',
        'account_id': 'str',
        'last_revalidated_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'metric_identifier': 'metric_identifier',
        'suffix': 'suffix',
        'display': 'display',
        'tooltip_description': 'tooltip_description',
        'y_axis_min': 'y_axis_min',
        'y_axis_max': 'y_axis_max',
        'decimal_places': 'decimal_places',
        'type': 'type',
        'email': 'email',
        'disabled': 'disabled',
        'api_key': 'api_key',
        'api_token': 'api_token',
        'application_key': 'application_key',
        'account_id': 'account_id',
        'last_revalidated_at': 'last_revalidated_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, metric_identifier=None, suffix=None, display=None, tooltip_description=None, y_axis_min=None, y_axis_max=None, decimal_places=None, type=None, email=None, disabled=None, api_key=None, api_token=None, application_key=None, account_id=None, last_revalidated_at=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """MetricsProvider - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._metric_identifier = None
        self._suffix = None
        self._display = None
        self._tooltip_description = None
        self._y_axis_min = None
        self._y_axis_max = None
        self._decimal_places = None
        self._type = None
        self._email = None
        self._disabled = None
        self._api_key = None
        self._api_token = None
        self._application_key = None
        self._account_id = None
        self._last_revalidated_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if metric_identifier is not None:
            self.metric_identifier = metric_identifier
        if suffix is not None:
            self.suffix = suffix
        if display is not None:
            self.display = display
        if tooltip_description is not None:
            self.tooltip_description = tooltip_description
        if y_axis_min is not None:
            self.y_axis_min = y_axis_min
        if y_axis_max is not None:
            self.y_axis_max = y_axis_max
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if type is not None:
            self.type = type
        if email is not None:
            self.email = email
        if disabled is not None:
            self.disabled = disabled
        if api_key is not None:
            self.api_key = api_key
        if api_token is not None:
            self.api_token = api_token
        if application_key is not None:
            self.application_key = application_key
        if account_id is not None:
            self.account_id = account_id
        if last_revalidated_at is not None:
            self.last_revalidated_at = last_revalidated_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MetricsProvider.  # noqa: E501

        Identifier for Metrics Provider  # noqa: E501

        :return: The id of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsProvider.

        Identifier for Metrics Provider  # noqa: E501

        :param id: The id of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MetricsProvider.  # noqa: E501

        Display name for the metric.  # noqa: E501

        :return: The name of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricsProvider.

        Display name for the metric.  # noqa: E501

        :param name: The name of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def metric_identifier(self):
        """Gets the metric_identifier of this MetricsProvider.  # noqa: E501


        :return: The metric_identifier of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._metric_identifier

    @metric_identifier.setter
    def metric_identifier(self, metric_identifier):
        """Sets the metric_identifier of this MetricsProvider.


        :param metric_identifier: The metric_identifier of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._metric_identifier = metric_identifier

    @property
    def suffix(self):
        """Gets the suffix of this MetricsProvider.  # noqa: E501

        Suffix or units for the metric.  # noqa: E501

        :return: The suffix of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this MetricsProvider.

        Suffix or units for the metric.  # noqa: E501

        :param suffix: The suffix of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def display(self):
        """Gets the display of this MetricsProvider.  # noqa: E501

        Boolean to determine whether or not to show metric immediately on page.  # noqa: E501

        :return: The display of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this MetricsProvider.

        Boolean to determine whether or not to show metric immediately on page.  # noqa: E501

        :param display: The display of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def tooltip_description(self):
        """Gets the tooltip_description of this MetricsProvider.  # noqa: E501

        Description of the metric as displayed on the page in a tooltip.  # noqa: E501

        :return: The tooltip_description of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._tooltip_description

    @tooltip_description.setter
    def tooltip_description(self, tooltip_description):
        """Sets the tooltip_description of this MetricsProvider.

        Description of the metric as displayed on the page in a tooltip.  # noqa: E501

        :param tooltip_description: The tooltip_description of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._tooltip_description = tooltip_description

    @property
    def y_axis_min(self):
        """Gets the y_axis_min of this MetricsProvider.  # noqa: E501

        Minimum value for Y-axis display  # noqa: E501

        :return: The y_axis_min of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_min

    @y_axis_min.setter
    def y_axis_min(self, y_axis_min):
        """Sets the y_axis_min of this MetricsProvider.

        Minimum value for Y-axis display  # noqa: E501

        :param y_axis_min: The y_axis_min of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._y_axis_min = y_axis_min

    @property
    def y_axis_max(self):
        """Gets the y_axis_max of this MetricsProvider.  # noqa: E501

        Maximum value for Y-axis display  # noqa: E501

        :return: The y_axis_max of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_max

    @y_axis_max.setter
    def y_axis_max(self, y_axis_max):
        """Sets the y_axis_max of this MetricsProvider.

        Maximum value for Y-axis display  # noqa: E501

        :param y_axis_max: The y_axis_max of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._y_axis_max = y_axis_max

    @property
    def decimal_places(self):
        """Gets the decimal_places of this MetricsProvider.  # noqa: E501

        Amount of decimal values to use in display in values and average over a time period.  # noqa: E501

        :return: The decimal_places of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this MetricsProvider.

        Amount of decimal values to use in display in values and average over a time period.  # noqa: E501

        :param decimal_places: The decimal_places of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._decimal_places = decimal_places

    @property
    def type(self):
        """Gets the type of this MetricsProvider.  # noqa: E501


        :return: The type of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricsProvider.


        :param type: The type of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def email(self):
        """Gets the email of this MetricsProvider.  # noqa: E501


        :return: The email of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MetricsProvider.


        :param email: The email of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def disabled(self):
        """Gets the disabled of this MetricsProvider.  # noqa: E501


        :return: The disabled of this MetricsProvider.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MetricsProvider.


        :param disabled: The disabled of this MetricsProvider.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def api_key(self):
        """Gets the api_key of this MetricsProvider.  # noqa: E501


        :return: The api_key of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MetricsProvider.


        :param api_key: The api_key of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def api_token(self):
        """Gets the api_token of this MetricsProvider.  # noqa: E501


        :return: The api_token of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this MetricsProvider.


        :param api_token: The api_token of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._api_token = api_token

    @property
    def application_key(self):
        """Gets the application_key of this MetricsProvider.  # noqa: E501


        :return: The application_key of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._application_key

    @application_key.setter
    def application_key(self, application_key):
        """Sets the application_key of this MetricsProvider.


        :param application_key: The application_key of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._application_key = application_key

    @property
    def account_id(self):
        """Gets the account_id of this MetricsProvider.  # noqa: E501


        :return: The account_id of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MetricsProvider.


        :param account_id: The account_id of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def last_revalidated_at(self):
        """Gets the last_revalidated_at of this MetricsProvider.  # noqa: E501


        :return: The last_revalidated_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._last_revalidated_at

    @last_revalidated_at.setter
    def last_revalidated_at(self, last_revalidated_at):
        """Sets the last_revalidated_at of this MetricsProvider.


        :param last_revalidated_at: The last_revalidated_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._last_revalidated_at = last_revalidated_at

    @property
    def created_at(self):
        """Gets the created_at of this MetricsProvider.  # noqa: E501


        :return: The created_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MetricsProvider.


        :param created_at: The created_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MetricsProvider.  # noqa: E501


        :return: The updated_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MetricsProvider.


        :param updated_at: The updated_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsProvider):
            return True

        return self.to_dict() != other.to_dict()
