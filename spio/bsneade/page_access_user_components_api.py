# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://help.statuspage.io/help/contact-us-30  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased or lifted, please contact us at https://help.statuspage.io/help/contact-us-30  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spio.api_client import ApiClient
from spio.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PageAccessUserComponentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_pages_page_id_page_access_users_page_access_user_id_components(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Remove components for page access user  # noqa: E501

        Remove components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pages_page_id_page_access_users_page_access_user_id_components(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param list[str] component_ids: List of components codes to remove.  If omitted, all components will be removed.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, **kwargs)  # noqa: E501

    def delete_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Remove components for page access user  # noqa: E501

        Remove components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param list[str] component_ids: List of components codes to remove.  If omitted, all components will be removed.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id', 'component_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pages_page_id_page_access_users_page_access_user_id_components" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `delete_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `delete_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'component_ids' in local_var_params:
            form_params.append(('component_ids', local_var_params['component_ids']))  # noqa: E501
            collection_formats['component_ids'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pages_page_id_page_access_users_page_access_user_id_components_component_id(self, page_id, page_access_user_id, component_id, **kwargs):  # noqa: E501
        """Remove component for page access user  # noqa: E501

        Remove component for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pages_page_id_page_access_users_page_access_user_id_components_component_id(page_id, page_access_user_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param str component_id: Component identifier (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PageAccessUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pages_page_id_page_access_users_page_access_user_id_components_component_id_with_http_info(page_id, page_access_user_id, component_id, **kwargs)  # noqa: E501

    def delete_pages_page_id_page_access_users_page_access_user_id_components_component_id_with_http_info(self, page_id, page_access_user_id, component_id, **kwargs):  # noqa: E501
        """Remove component for page access user  # noqa: E501

        Remove component for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pages_page_id_page_access_users_page_access_user_id_components_component_id_with_http_info(page_id, page_access_user_id, component_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param str component_id: Component identifier (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PageAccessUser, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id', 'component_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pages_page_id_page_access_users_page_access_user_id_components_component_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `delete_pages_page_id_page_access_users_page_access_user_id_components_component_id`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `delete_pages_page_id_page_access_users_page_access_user_id_components_component_id`")  # noqa: E501
        # verify the required parameter 'component_id' is set
        if self.api_client.client_side_validation and ('component_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['component_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `component_id` when calling `delete_pages_page_id_page_access_users_page_access_user_id_components_component_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501
        if 'component_id' in local_var_params:
            path_params['component_id'] = local_var_params['component_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAccessUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pages_page_id_page_access_users_page_access_user_id_components(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Get components for page access user  # noqa: E501

        Get components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pages_page_id_page_access_users_page_access_user_id_components(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, **kwargs)  # noqa: E501

    def get_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Get components for page access user  # noqa: E501

        Get components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pages_page_id_page_access_users_page_access_user_id_components" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `get_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `get_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_pages_page_id_page_access_users_page_access_user_id_components(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Add components for page access user  # noqa: E501

        Add components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_pages_page_id_page_access_users_page_access_user_id_components(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, **kwargs)  # noqa: E501

    def patch_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Add components for page access user  # noqa: E501

        Add components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_pages_page_id_page_access_users_page_access_user_id_components" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `patch_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `patch_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pages_page_id_page_access_users_page_access_user_id_components(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Replace components for page access user  # noqa: E501

        Replace components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pages_page_id_page_access_users_page_access_user_id_components(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, **kwargs)  # noqa: E501

    def post_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Replace components for page access user  # noqa: E501

        Replace components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pages_page_id_page_access_users_page_access_user_id_components" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `post_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `post_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_pages_page_id_page_access_users_page_access_user_id_components(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Add components for page access user  # noqa: E501

        Add components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_pages_page_id_page_access_users_page_access_user_id_components(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.put_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, **kwargs)  # noqa: E501

    def put_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(self, page_id, page_access_user_id, **kwargs):  # noqa: E501
        """Add components for page access user  # noqa: E501

        Add components for page access user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_pages_page_id_page_access_users_page_access_user_id_components_with_http_info(page_id, page_access_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str page_id: Page identifier (required)
        :param str page_access_user_id: Page Access User Identifier (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'page_access_user_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_pages_page_id_page_access_users_page_access_user_id_components" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if self.api_client.client_side_validation and ('page_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_id` when calling `put_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501
        # verify the required parameter 'page_access_user_id' is set
        if self.api_client.client_side_validation and ('page_access_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_access_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_access_user_id` when calling `put_pages_page_id_page_access_users_page_access_user_id_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501
        if 'page_access_user_id' in local_var_params:
            path_params['page_access_user_id'] = local_var_params['page_access_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}/page_access_users/{page_access_user_id}/components', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
